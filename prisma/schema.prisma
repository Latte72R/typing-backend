datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER @map("user")
  ADMIN @map("admin")
}

enum ContestVisibility {
  PUBLIC @map("public")
  PRIVATE @map("private")
}

enum LeaderboardVisibility {
  DURING @map("during")
  AFTER @map("after")
  HIDDEN @map("hidden")
}

enum ContestLanguage {
  ROMAJI @map("romaji")
  ENGLISH @map("english")
  KANA @map("kana")
}

enum SessionStatus {
  RUNNING @map("running")
  FINISHED @map("finished")
  DQ @map("dq")
  EXPIRED @map("expired")
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  passwordHash  String          @map("password_hash")
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now()) @map("created_at")

  contests      Contest[]       @relation("ContestCreator")
  entries       Entry[]
  sessions      Session[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Contest {
  id                     String                 @id @default(uuid())
  title                  String
  description            String?
  visibility             ContestVisibility
  joinCode               String?                @map("join_code")
  startsAt               DateTime               @map("starts_at")
  endsAt                 DateTime               @map("ends_at")
  timezone               String                 @default("Asia/Tokyo")
  timeLimitSec           Int                    @map("time_limit_sec")
  allowBackspace         Boolean                @default(false) @map("allow_backspace")
  leaderboardVisibility  LeaderboardVisibility  @map("leaderboard_visibility")
  language               ContestLanguage
  createdBy              String                 @map("created_by")
  createdAt              DateTime               @default(now()) @map("created_at")

  creator                User                   @relation("ContestCreator", fields: [createdBy], references: [id])
  prompts                ContestPrompt[]
  entries                Entry[]
  sessions               Session[]

  @@map("contests")
}

model Prompt {
  id            String           @id @default(uuid())
  language      ContestLanguage
  displayText   String           @map("display_text")
  typingTarget  String           @map("typing_target")
  tags          String[]         @db.Text
  isActive      Boolean          @default(true) @map("is_active")
  createdAt     DateTime         @default(now()) @map("created_at")

  contests      ContestPrompt[]
  sessions      Session[]
  sessionPrompts SessionPrompt[]

  @@map("prompts")
}

model ContestPrompt {
  contestId String  @map("contest_id")
  promptId  String  @map("prompt_id")
  orderIndex Int    @map("order_index")

  contest   Contest @relation(fields: [contestId], references: [id])
  prompt    Prompt  @relation(fields: [promptId], references: [id])

  @@id([contestId, promptId])
  @@map("contest_prompts")
}

model Entry {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  contestId      String   @map("contest_id")
  attemptsUsed   Int      @default(0) @map("attempts_used")
  bestScore      Int?     @map("best_score")
  bestCpm        Decimal? @map("best_cpm") @db.Decimal(10, 4)
  bestAccuracy   Decimal? @map("best_accuracy") @db.Decimal(10, 4)
  lastAttemptAt  DateTime? @map("last_attempt_at")

  user    User    @relation(fields: [userId], references: [id])
  contest Contest @relation(fields: [contestId], references: [id])

  @@unique([userId, contestId])
  @@index([contestId, bestScore], map: "entries_contest_best_score_idx")
  @@map("entries")
}

model Session {
  id           String         @id @default(uuid())
  userId       String         @map("user_id")
  contestId    String         @map("contest_id")
  promptId     String         @map("prompt_id")
  startedAt    DateTime       @map("started_at")
  endedAt      DateTime?      @map("ended_at")
  status       SessionStatus
  cpm          Decimal?       @db.Decimal(10, 4)
  wpm          Decimal?       @db.Decimal(10, 4)
  accuracy     Decimal?       @db.Decimal(10, 4)
  errors       Int?
  score        Int?
  defocusCount Int            @default(0) @map("defocus_count")
  pasteBlocked Boolean        @default(true) @map("paste_blocked")
  anomalyScore Decimal?       @map("anomaly_score") @db.Decimal(10, 4)
  dqReason     String?        @map("dq_reason")

  user        User        @relation(fields: [userId], references: [id])
  contest     Contest     @relation(fields: [contestId], references: [id])
  prompt      Prompt      @relation(fields: [promptId], references: [id])
  keystrokes  Keystroke[]
  sessionPrompts SessionPrompt[]

  @@index([contestId, score], map: "sessions_contest_score_idx")
  @@map("sessions")
}

model Keystroke {
  id        BigInt  @id @default(autoincrement())
  sessionId String  @map("session_id")
  idx       Int
  tMs       Int     @map("t_ms")
  key       String
  ok        Boolean

  session   Session @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@map("keystrokes")
}

model SessionPrompt {
  sessionId  String  @map("session_id")
  promptId   String  @map("prompt_id")
  orderIndex Int     @map("order_index")

  session Session @relation(fields: [sessionId], references: [id])
  prompt  Prompt  @relation(fields: [promptId], references: [id])

  @@id([sessionId, orderIndex])
  @@index([sessionId], map: "session_prompts_session_idx")
  @@map("session_prompts")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@index([tokenHash])
  @@map("refresh_tokens")
}
